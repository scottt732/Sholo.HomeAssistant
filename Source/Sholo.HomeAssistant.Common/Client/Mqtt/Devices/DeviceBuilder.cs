using System;
using System.Collections.Generic;
using System.Linq;

namespace Sholo.HomeAssistant.Client.Mqtt.Devices;

public class DeviceBuilder : IDeviceBuilder
{
    private readonly Device _device = new();

    /*
    area_id              The Area which the device is placed in.
    config_entries       Config entries that are linked to this device.
    configuration_url    A URL on which the device or service can be configured, linking to paths inside the Home Assistant UI can be done by using homeassistant://<path>.
    connections          A set of tuples of (connection_type, connection identifier). Connection types are defined in the device registry module. Each item in the set uniquely defines a device entry, meaning another device can't have the same connection.
    default_manufacturer The manufacturer of the device, will be overridden if manufacturer is set. Useful for example for an integration showing all devices on the network.
    default_model        The model of the device, will be overridden if model is set. Useful for example for an integration showing all devices on the network.
    default_name         Default name of this device, will be overridden if name is set. Useful for example for an integration showing all devices on the network.
    entry_type           The type of entry. Possible values are None and DeviceEntryType enum members (only service).
    hw_version           The hardware version of the device.
    id                   Unique ID of device (generated by Home Assistant)
    identifiers          Set of (DOMAIN, identifier) tuples. Identifiers identify the device in the outside world. An example is a serial number. Each item in the set uniquely defines a device entry, meaning another device can't have the same identifier.
    name                 Name of this device
    name_by_user         The user configured name of the device.
    manufacturer         The manufacturer of the device.
    model                The model of the device.
    serial_number        The serial number of the device. Unlike a serial number in the identifiers set, this does not need to be unique.
    suggested_area       The suggested name for the area where the device is located.
    sw_version           The firmware version of the device.
    via_device           Identifier of a device that routes messages between this device and Home Assistant. Examples of such devices are hubs, or parent devices of a sub-device. This is used to show device topology in Home Assistant.
    */

    public IDeviceBuilder WithConnection(string connectionType, string connectionIdentifier)
    {
        _device.AddConnection(connectionType, connectionIdentifier);
        return this;
    }

    public IDeviceBuilder WithIdentifier(string identifier)
    {
        _device.AddIdentifier(identifier);
        return this;
    }

    public IDeviceBuilder WithIdentifiers(params string[] identifier)
    {
        _device.AddIdentifiers(identifier);
        return this;
    }

    public IDeviceBuilder WithManufacturer(string manufacturer)
    {
        _device.Manufacturer = manufacturer;
        return this;
    }

    public IDeviceBuilder WithModel(string model)
    {
        _device.Model = model;
        return this;
    }

    public IDeviceBuilder WithName(string name)
    {
        _device.Name = name;
        return this;
    }

    public IDeviceBuilder WithSwVersion(string swVersion)
    {
        _device.SwVersion = swVersion;
        return this;
    }

    public IDeviceBuilder WithViaDevice(string? viaDeviceId)
    {
        _device.ViaDevice = viaDeviceId;
        return this;
    }

    public IDeviceBuilder WithSuggestedArea(string? areaName)
    {
        _device.SuggestedArea = areaName;
        return this;
    }

    public IDevice Build() => _device;

    private sealed class Device : IDevice
    {
        public IDictionary<string, string>? Connections => _connections.Count > 0 ? _connections : null;
        public string[]? Identifiers => _identifiers.Count > 0 ? _identifiers.ToArray() : null;
        public string Manufacturer { get; set; } = null!;
        public string Model { get; set; } = null!;
        public string Name { get; set; } = null!;
        public string SwVersion { get; set; } = null!;
        public string? SuggestedArea { get; set; }
        public string? ViaDevice { get; set; }

        private readonly IDictionary<string, string> _connections = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
        private readonly HashSet<string> _identifiers = new();

        public void AddIdentifier(string identifier)
        {
            _identifiers.Add(identifier);
        }

        public void AddIdentifiers(params string[] identifiers)
        {
            foreach (var identifier in identifiers)
            {
                _identifiers.Add(identifier);
            }
        }

        public void AddConnection(string connectionType, string connectionIdentifier)
        {
            _connections.Add(connectionType, connectionIdentifier);
        }
    }
}
